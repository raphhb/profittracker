<?php 

class Sales
{
	use Controller;


	public function index()
	{

        // Check if user is logged in
        if (!isset($_SESSION['admin'])) {
            // If not logged in as admin, redirect to login page
            redirect('login');
        }
		
		// Models
        $products = new ProductsModel();
		$expense = new ExpensesModel();
		$profit = new ProfitModel();
        $sale = new SalesModel();
		$user = new UserModel();

		//User
		$notif = $user->getNotifications();
        $notifUnread = $user->getNotificationsUnread();

		//Profit
		$currentMonthlyProfit = $profit->getMonthlyProfitData();
		$previousMonthlyProfit = $profit->getPreviousMonthProfitData();

		//Expense
		$currentMonth = $expense->getCurrentMonth();

		// Sales
        $allSales = $sale->getAllSales();
        $monthlySales = $sale->getMonthlySales();
        $weeklySales = $sale->getWeeklySales();
        $todaySales = $sale->getDailySales();
        $monthlySalesData = $sale->getMonthlySaleData();
		$currentMonthlySales = $sale->getMonthlySaleData();

		$countDailySales = $sale->countDailySales();
		$countWeeklySales = $sale->countWeeklySales();
		$countMonthlySales = $sale->countMonthlySales();

		// Products
		$topSellingProduct = $products->getMonthlyTopSellingProduct();
		

        $this->view('sales', 
        ['allSales' => $allSales,
         'monthlySales' => $monthlySales,
         'weeklySales' => $weeklySales,
         'todaySales' => $todaySales,
		 'currentMonthlyProfit' => $currentMonthlyProfit,
		 'previousMonthlyProfit' => $previousMonthlyProfit,
		 'currentMonth' => $currentMonth,
		 'monthlySalesData' => $monthlySalesData,
		 'topSellingProduct' => $topSellingProduct,
		 'notif' => $notif,
		 'notifUnread' => $notifUnread,
		 'currentMonthlySales' => $currentMonthlySales
		]);
	}

	public function generatePDF()
	{
		if ($_SERVER['REQUEST_METHOD'] == 'POST') {
			require_once('C:\xampp\htdocs\ProfitTracker\public\assets\libraries\tcpdf\tcpdf.php');
			// Change orientation to landscape ('L')
			$pdf = new TCPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
	
			$sale = new SalesModel();
	
			// Fetch sales data
			$allSales = $sale->getAllSales();
			$monthlySales = $sale->getMonthlySales();
			$weeklySales = $sale->getWeeklySales();
			$todaySales = $sale->getDailySales();
	
			// Set document information
			$pdf->SetCreator(PDF_CREATOR);
			$pdf->SetAuthor('Your Name=');
			$pdf->SetTitle('Sales Report');
			$pdf->SetSubject('Sales Report');
			$pdf->SetKeywords('TCPDF, PDF, sales, report');

            // Set default header data including the current date
            $currentDate = date('Y-m-d H:i:s');
            $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, 'Sales Report', 'Generated by ProfitTracker on ' . $currentDate, [0,64,255], [0,64,128]);

			// Set default header data
			// $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, 'Sales Report', 'Generated by ProfitTracker', [0,64,255], [0,64,128]);
			
			// Set header and footer fonts
			$pdf->setHeaderFont([PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN]);
			$pdf->setFooterFont([PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA]);
	
			// Set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
	
			// Set margins
			$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
			$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
	
			// Set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
	
			// Set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
	
			// Set font
			$pdf->SetFont('dejavusans', '', 10);
	
			// Add a page
			$pdf->AddPage();
	
			// Create the HTML content
			$html = '<h1>Sales Report</h1>';
	
			if (!empty($_POST['specific_date'])) {
				$specificDate = $_POST['specific_date'];
				$html .= '<p>Report for specific date: ' . $specificDate . '</p>';
				// Fetch and include data for the specific date if applicable
				// Example: $specificDateSales = $sale->getSalesByDate($specificDate);
				// $html .= $this->generateHTMLTable('Sales', $specificDateSales);
			} else {
				// Handle different report types
				switch ($_POST['report_type']) {
					case '1': // All
						// $html .= '<h2>All Sales</h2>';
						$html .= $this->generateHTMLTable('All Sales', $allSales);
						break;
					case '2': // Monthly
						// $html .= '<h2>Monthly Sales</h2>';
						$html .= $this->generateHTMLTable('Monthly Sales', $monthlySales);
						break;
					case '3': // Weekly
						// $html .= '<h2>Weekly Sales</h2>';
						$html .= $this->generateHTMLTable('Weekly Sales', $weeklySales);
						break;
					case '4': // Daily
						// $html .= '<h2>Daily Sales</h2>';
						$html .= $this->generateHTMLTable('Daily Sales', $todaySales);
						break;
					default:
						die('Invalid report type.');
				}
			}
	
			// Output the HTML content
			$pdf->writeHTML($html, true, false, true, false, '');
	
			// Close and output PDF document
			$pdf->Output('sales_report.pdf', 'D');
		}
	}
	
	private function generateHTMLTable($title, $data)
	{
		$html = '<h3>' . htmlspecialchars($title) . '</h3>';
		$html .= '<table border="1" cellspacing="3" cellpadding="4">';
		$html .= '<thead><tr>
					<th>Sale ID</th>
					<th>Product ID</th> <!-- Added Product ID -->
					<th>Category</th>
					<th>Product</th>
					<th>Quantity</th>
					<th>Sale Price</th>
					<th>Sale Date</th>
					<th>Amount</th>
					<th>Description</th>
				</tr></thead><tbody>';
		foreach ($data as $row) {
			// Convert 24-hour format to 12-hour format with AM/PM
			$saleDate = date('M j, Y g:i A', strtotime($row->saledate));
	
			$html .= '<tr>
						<td>' . htmlspecialchars($row->saleid) . '</td>
						<td>' . htmlspecialchars($row->productid) . '</td> <!-- Added Product ID -->
						<td>' . htmlspecialchars($row->categoryname) . '</td>
						<td>' . htmlspecialchars($row->productname) . '</td>
						<td>' . htmlspecialchars($row->quantity) . '</td>
						<td>' . htmlspecialchars($row->saleprice) . '</td>
						<td>' . htmlspecialchars($saleDate) . '</td>
						<td>' . htmlspecialchars($row->amount) . '</td>
						<td>' . htmlspecialchars($row->description) . '</td>
					</tr>';
		}
		$html .= '</tbody></table>';
		return $html;
	}
	
	

	public function addSales()
	{
		if ($_SERVER['REQUEST_METHOD'] == 'POST') {
			// Sanitize and validate the input data
			$userID = $_SESSION['user_id']; // Assuming the user ID is 1 for now
			$productID = isset($_POST['search_product_id']) ? (int)$_POST['search_product_id'] : null;
			$categoryID = isset($_POST['category_id']) ? (int)$_POST['category_id'] : null;
			$merchCategoryID = isset($_POST['merch_category_id']) ? (int)$_POST['merch_category_id'] : null;
			$quantity = isset($_POST['qty']) ? (int)$_POST['qty'] : null;
			$merchQuantity = isset($_POST['merch_qty']) ? (int)$_POST['merch_qty'] : null;
			$salePrice = isset($_POST['unitPrice']) ? (float)$_POST['unitPrice'] : null;
			$merchSalePrice = isset($_POST['merch_unitPrice']) ? (float)$_POST['merch_unitPrice'] : null;
			
			$productSales = new SalesModel();
	
			try {
				// Create an array to hold the product sales data
				if ($categoryID) {
					if ($categoryID === 1) {
						// Merch category
						$merchsalesData = [
							'userID' => $userID,
							'productID' => $productID,
							'merchCategoryID' => $categoryID,
							'merchQuantity' => $merchQuantity,
							'merchSalePrice' => $merchSalePrice,
						];
						$productSales->saveMerchSales($merchsalesData);
					} else {
						// Shoes or Clothing category
						$salesData = [
							'userID' => $userID,
							'productID' => $productID,
							'categoryID' => $categoryID,
							'quantity' => $quantity,
							'salePrice' => $salePrice,
						];
						$productSales->saveSales($salesData);
					}
				} else {
					// Handle the case where required fields are missing
					throw new Exception("Error: Missing required fields.");
				}
	
				// Redirect to a success page or display a success message
				header('Location: ' . ROOT . '/sales');
				exit;
			} catch (Exception $e) {
				$errorMessage = $e->getMessage();
				// Pass the error message to the view
				return $this->view('sales', ['errorMessage' => $errorMessage]);
			}
		} else {
			// If not a POST request, show a 404 page (optional)
			$this->view('404');
		}
	}
	
	// Assuming this is part of a controller or handler function
	public function deleteSale() {
		// Check if saleid is provided and is numeric
		if (isset($_POST['saleid']) && is_numeric($_POST['saleid'])) {
			$saleId = $_POST['saleid'];
			
			$saleModel = new SalesModel(); // Instantiate your model class
			$deleteSale = $saleModel->deleteSale($saleId); // Call the deleteSale method

			if ($deleteSale) {
				// Redirect to a success page or display a success message
				header('Location: ' . ROOT . '/sales');
			} else {
				$errorMessage = "Something wrong in the deletion process";
				// Pass the error message to the view
				return $this->view('sales', ['errorMessage' => $errorMessage]);
			}
		} else {
			// Invalid request
			echo "Invalid request.";
		}
	}


	public function getProductById(){
		if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            http_response_code(405);
            exit('Method Not Allowed');
        }

        // Assuming you have a method to sanitize input or validate the data
        $productId = $_POST['productId'];

		$product = new ProductsModel();
		// product id process here
		$prodDetails = $product->getProductDetailsById($productId);	

        // Return JSON response
        header('Content-Type: application/json');
        echo json_encode($prodDetails);
	}


}
