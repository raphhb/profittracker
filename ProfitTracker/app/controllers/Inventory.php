<?php 

class Inventory
{
	use Controller;

	public function index()
	{
        // Check if user is logged in
        if (!isset($_SESSION['admin'])) {
            // If not logged in as admin, redirect to login page
            redirect('login');
        }
        
        $products = new ProductsModel();

        $merchProducts = $products->getProducts(1);
        $shoeProducts = $products->getProducts(2);
        $clothingProducts = $products->getProducts(3);

        $expenseMonthly = new ExpensesModel();
        $chartData = $expenseMonthly->getAllExpensesPercentage();

        $user = new UserModel();

		//User
        $notif = $user->getNotifications();
		$notif = $user->getNotifications();
        $notifUnread = $user->getNotificationsUnread();


        // show($shoeProducts);
        // $chart = new chartModel();
        // $chartData = $chart->getAllLabels(); // Assuming this method retrieves data from the database
        // show($chartData);

        $this->view('inventory', 
        ['shoes' => $shoeProducts , 
        "clothing" => $clothingProducts, 
        "merch" => $merchProducts, 
        "chart" => $chartData,
        'notif' => $notif,
        'notifUnread' => $notifUnread
        ]);
	}

        public function getData()
        {
            $expenseMonthly = new ExpensesModel();
            $chartData = $expenseMonthly->getAllExpensesPercentage();
            // $chart = new chartModel();
            // $chartData = $chart->getAllLabels(); // Assuming this method retrieves data from the database
            header('Content-Type: application/json');
            echo json_encode($chartData);
        }

        public function generatePDF()
        {
            if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['report_type'])) {
                require_once('C:\xampp\htdocs\ProfitTracker\public\assets\libraries\tcpdf\tcpdf.php');
                // Create new TCPDF object with landscape orientation
                $pdf = new TCPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
                
        
                $products = new ProductsModel();
        
                $shoeProducts = $products->getProducts('2');
                $clothingProducts = $products->getProducts('3');
                $merchProducts = $products->getProducts('1');
        
                // set document information
                $pdf->SetCreator(PDF_CREATOR);
                $pdf->SetAuthor('Your Name');
                $pdf->SetTitle('Inventory Report');
                $pdf->SetSubject('Inventory Report');
                $pdf->SetKeywords('TCPDF, PDF, inventory, report');
        
                // set default header data
                // $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
                
                // Set default header data including the current date
                $currentDate = date('Y-m-d H:i:s');
                $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, 'Generated by ProfitTracker on ' . $currentDate, [0,64,255], [0,64,128]);
                
                // set header and footer fonts
                $pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
                $pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
        
                // set default monospaced font
                $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
        
                // set margins
                $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
                $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
                $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
        
                // set auto page breaks
                $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
        
                // set image scale factor
                $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
        
                // set font
                $pdf->SetFont('dejavusans', '', 10);
        
                // add a page
                $pdf->AddPage();
        
                // create the HTML content
                $html = '<h1>Inventory Report</h1>';
        
                // Handle different report types
                switch ($_POST['report_type']) {
                    case '1': // All
                        $html .= $this->generateHTMLTable('Shoes', $shoeProducts);
                        $html .= $this->generateHTMLTable('Clothing', $clothingProducts);
                        $html .= $this->generateHTMLTable('Merch', $merchProducts);
                        break;
                    case '2': // Shoes
                        $html .= $this->generateHTMLTable('Shoes', $shoeProducts);
                        break;
                    case '3': // Clothing
                        $html .= $this->generateHTMLTable('Clothing', $clothingProducts);
                        break;
                    case '4': // Merch
                        $html .= $this->generateHTMLTable('Merch', $merchProducts);
                        break;
                    default:
                        // Invalid report type
                        die('Invalid report type.');
                        break;
                }
        
                // output the HTML content
                $pdf->writeHTML($html, true, false, true, false, '');
        
                // Close and output PDF document
                $pdf->Output('inventory_report.pdf', 'D');
            }
        }
        
        private function generateHTMLTable($title, $products)
        {
            $html = '';
        
            if (!empty($products)) {
                $html .= '<h2>' . htmlspecialchars($title) . '</h2>';
                $html .= '<table border="1" cellspacing="3" cellpadding="4">
                            <thead>
                                <tr>
                                    <th>P.ID</th>
                                    <th>Category</th>
                                    <th>Brand</th>
                                    <th>Name</th>
                                    <th>Size</th>
                                    <th>Color</th>
                                    <th>Price</th>
                                    <th>Qty</th>
                                    <th>Added Date</th>
                                </tr>
                            </thead>
                            <tbody>';
                foreach ($products as $product) {
                    // Convert 24-hour format to 12-hour format with AM/PM
                    $addedDate = date('M j, Y g:i A', strtotime($product->addeddate));
        
                    $html .= '<tr>
                                <td>' . htmlspecialchars($product->productid) . '</td>
                                <td>' . htmlspecialchars($product->productcategory) . '</td>
                                <td>' . htmlspecialchars($product->brandname) . '</td>
                                <td>' . htmlspecialchars($product->name) . '</td>
                                <td>' . htmlspecialchars($product->size) . '</td>
                                <td>' . htmlspecialchars($product->color) . '</td>
                                <td>' . htmlspecialchars($product->price) . '</td>
                                <td>' . htmlspecialchars($product->quantity) . '</td>
                                <td>' . htmlspecialchars($addedDate) . '</td>
                            </tr>';
                }
                $html .= '</tbody></table>';
            }
        
            return $html;
        }
        
    

    public function updatePrice()
    {
        $productModel = new ProductsModel();
    
        // Check if the form was submitted
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            // Sanitize and validate the input
            $salePrice = filter_input(INPUT_POST, 'sale_price', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION);
            $productId = filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_STRING);
    
            // Ensure the inputs are not empty
            if (!empty($salePrice) && !empty($productId)) {
                // Update the sale price
                $result = $productModel->UpdateSalePrice($salePrice, $productId);
    
                // Check if the update was successful
                if ($result) {
                    // Redirect or provide feedback
                    // Redirect to a success page or display a success message
                    header('Location: ' . ROOT . '/inventory');
                } else {
                    echo "Failed to update sale price.";
                }
            } else {
                echo "Invalid input.";
            }
        } else {
            echo "Invalid request method.";
        }
    }
    
    
}

?>
