<?php 

class Expenses
{
	use Controller;


	public function index()
	{
        // Check if user is logged in
        if (!isset($_SESSION['admin'])) {
            // If not logged in as admin, redirect to login page
            redirect('login');
        }
		
        $expense = new ExpensesModel();
		$profit = new ProfitModel();
		$user = new UserModel();

		//User
		$notif = $user->getNotifications();
        $notifUnread = $user->getNotificationsUnread();
		
        $expenses = $expense->getAllExpenses();

		$dailyExpenses = $expense->getDailyExpenses();
		$weeklyExpenses = $expense->getWeeklyExpenses();
		$monthlyExpenses = $expense->getMonthlyExpenses();

		//Expenses
		$latestExpenses = $expense->getLatestExpenses();
		$currentMonthlyExpenses = $expense->getMonthlyExpensesData();
		$previousMonthlyExpenses = $expense->getPreviousMonthExpensesData();
		$currentMonth = $expense->getCurrentMonth();
		// $chartData = $expense->getAllExpensesPercentage();
		$productExpense = $expense->getProductExpense();

		//Profit
		$currentMonthlyProfit = $profit->getMonthlyProfitData();
		$previousMonthlyProfit = $profit->getPreviousMonthProfitData();
		
		// show($dailyExpenses);
		
        $this->view('expenses', 
		['expenses' => $expenses,
		 'dailyExpenses' => $dailyExpenses,
		 'weeklyExpenses' => $weeklyExpenses,
		 'monthlyExpenses' => $monthlyExpenses,
		 'latestExpenses' => $latestExpenses,
		 'currentMonthlyExpenses' => $currentMonthlyExpenses,
		 'previousMonthlyExpenses' => $previousMonthlyExpenses,
		 'currentMonthlyProfit' => $currentMonthlyProfit,
		 'previousMonthlyProfit' => $previousMonthlyProfit,
		 'currentMonth' => $currentMonth,
		 'productExpense' => $productExpense,
		 'notif' => $notif,
		 'notifUnread' => $notifUnread

		]);
	}

	public function generatePDF()
	{
		if ($_SERVER['REQUEST_METHOD'] == 'POST') {
			require_once('C:\xampp\htdocs\ProfitTracker\public\assets\libraries\tcpdf\tcpdf.php');
			$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
	
			$expense = new ExpensesModel();
	
			// Fetch expenses data
			$allExpenses = $expense->getAllExpenses();
			$dailyExpenses = $expense->getDailyExpenses();
			$weeklyExpenses = $expense->getWeeklyExpenses();
			$monthlyExpenses = $expense->getMonthlyExpenses();
	
			// Set document information
			$pdf->SetCreator(PDF_CREATOR);
			$pdf->SetAuthor('Your Name');
			$pdf->SetTitle('Expenses Report');
			$pdf->SetSubject('Expenses Report');
			$pdf->SetKeywords('TCPDF, PDF, expenses, report');
	
			// Set default header data
			// $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADE	R_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
			// $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, 'Expenses Report', 'Generated by ProfitTracker', [0,64,255], [0,64,128]);

            // Set default header data including the current date
            $currentDate = date('Y-m-d H:i:s');
            $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, 'Expenses Report', 'Generated by ProfitTracker on ' . $currentDate, [0,64,255], [0,64,128]);

			// Set header and footer fonts
			$pdf->setHeaderFont([PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN]);
			$pdf->setFooterFont([PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA]);
	
			// Set default monospaced font
			$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
	
			// Set margins
			$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
			$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
			$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
	
			// Set auto page breaks
			$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
	
			// Set image scale factor
			$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
	
			// Set font
			$pdf->SetFont('dejavusans', '', 10);
	
			// Add a page
			$pdf->AddPage();
	
			// Create the HTML content
			$html = '<h1>Expenses Report</h1>';
	
			// Handle different report types
			if (!empty($_POST['specific_date'])) {
				$specificDate = $_POST['specific_date'];
				$html .= '<p>Report for specific date: ' . $specificDate . '</p>';
				// Fetch and include data for the specific date if applicable
				$specificDateExpenses = $expense->getExpensesByDate($specificDate);
				$html .= $this->generateHTMLTable('Expenses on ' . $specificDate, $specificDateExpenses);
			} else {
				switch ($_POST['report_type']) {
					case '1': // All
						$html .= '<h2>All Expenses</h2>';
						$html .= $this->generateHTMLTable('All Expenses', $allExpenses);
						break;
					case '2': // Monthly
						$html .= '<h2>Monthly Expenses</h2>';
						$html .= $this->generateHTMLTable('Monthly Expenses', $monthlyExpenses);
						break;
					case '3': // Weekly
						$html .= '<h2>Weekly Expenses</h2>';
						$html .= $this->generateHTMLTable('Weekly Expenses', $weeklyExpenses);
						break;
					case '4': // Daily
						$html .= '<h2>Daily Expenses</h2>';
						$html .= $this->generateHTMLTable('Daily Expenses', $dailyExpenses);
						break;
					default:
						die('Invalid report type.');
				}
			}
	
			// Output the HTML content
			$pdf->writeHTML($html, true, false, true, false, '');
	
			// Close and output PDF document
			$pdf->Output('expenses_report.pdf', 'D');
		}
	}
	
	private function generateHTMLTable($title, $data)
	{
		$html = '<h3>' . htmlspecialchars($title) . '</h3>';
		$html .= '<table border="1" cellspacing="3" cellpadding="4">';
		$html .= '<thead><tr>
					<th>Expense ID</th>
					<th>Category</th>
					<th>Amount</th>
					<th>Date</th>
					<th>Description</th>
				  </tr></thead><tbody>';
		foreach ($data as $row) {
			// Convert 24-hour format to 12-hour format with AM/PM
			$transactionDate = date('M j, Y g:i A', strtotime($row->transactiondate));
	
			$html .= '<tr>
						<td>' . htmlspecialchars($row->expenseid) . '</td>
						<td>' . htmlspecialchars($row->categoryname) . '</td>
						<td>' . htmlspecialchars($row->amount) . '</td>
						<td>' . htmlspecialchars($transactionDate) . '</td>
						<td>' . htmlspecialchars($row->description) . '</td>
					  </tr>';
		}
		$html .= '</tbody></table>';
		return $html;
	}
	
	public function addExpense()
	{
		if ($_SERVER['REQUEST_METHOD'] == 'POST') {
			// Sanitize and validate the input data
			$main_category = $_POST['main_category'];
			$description = isset($_POST['description']) ? trim($_POST['description']) : null;
			$amount = isset($_POST['amount']) ? (float)$_POST['amount'] : null;
	
			$product_subcategory = isset($_POST['product_subcategory']) ? $_POST['product_subcategory'] : null;
			$size = isset($_POST['size']) ? trim($_POST['size']) : null;
			$color = isset($_POST['color']) ? trim($_POST['color']) : null;
			$brand = isset($_POST['brand']) ? trim($_POST['brand']) : null;
			$name = isset($_POST['name']) ? trim($_POST['name']) : null;
			$qty = isset($_POST['qty']) ? (int)$_POST['qty'] : null;
			$unitPrice = isset($_POST['unitPrice']) ? (float)$_POST['unitPrice'] : null;
			$productImg = isset($_FILES['productImg']) ? $_FILES['productImg'] : null;
	
			// Handle file upload if there is an image
			$productImgPath = null;
			if ($productImg && $productImg['error'] == UPLOAD_ERR_OK) {
				$targetDir = "C:/xampp/htdocs/ProfitTracker/public/assets/images/productImages/";
				$targetFileName = basename($productImg["name"]);
				$targetFile = $targetDir . $targetFileName;
				$imageFileType = strtolower(pathinfo($targetFile, PATHINFO_EXTENSION));
	
				// Check if file is an actual image
				$check = getimagesize($productImg["tmp_name"]);
				if ($check !== false) {
					// Check file size (optional)
					if ($productImg["size"] < 1000000) { // 500KB max size (adjust as needed)
						// Allow certain file formats
						$allowedTypes = ['jpg', 'jpeg', 'png', 'gif'];
						if (in_array($imageFileType, $allowedTypes)) {
							// Move uploaded file to target directory
							if (move_uploaded_file($productImg["tmp_name"], $targetFile)) {
								$productImgPath = $targetFileName; // Save only the filename in database
							} else {
								// Handle error
								echo "Sorry, there was an error uploading your file.";
								exit;
							}
						} else {
							echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
							exit;
						}
					} else {
						echo "Sorry, your file is too large.";
						exit;
					}
				} else {
					echo "File is not an image.";
					exit;
				}
			}
	
			// Create an array to hold the expense data
			$expenseData = [
				'main_category' => $main_category,
				'description' => $description,
				'amount' => $amount,
				'product_subcategory' => $product_subcategory,
				'size' => $size,
				'color' => $color,
				'brand' => $brand,
				'name' => $name,
				'qty' => $qty,
				'unitPrice' => $unitPrice,
				'productImg' => $productImgPath // Store only the filename
			];
	
			// Save the data to the database using the model
			$expenseModel = new ExpensesModel();
	
			// Check if main_category is not equal to 1
			if ($main_category != 1) {
				$expenseModel->saveExpenseLog($expenseData);
			} else {
				// Save the data using both methods
				$expenseModel->saveExpenseLog($expenseData);
				$expenseModel->saveExpense($expenseData);
			}
	
			// Redirect to a success page or display a success message
			header('Location: ' . ROOT . '/expenses');
			exit;
		} else {
			// If not a POST request, show the add expense form (optional)
			$this->view('404');
		}
	}

	// Assuming this is part of a controller or handler function
	public function deleteExpense() {
		// Check if saleid is provided and is numeric
		if (isset($_POST['expenseid']) && is_numeric($_POST['expenseid'])) {
			$expenseId = $_POST['expenseid'];
			
			$expenseModel = new ExpensesModel(); // Instantiate your model class
			$deleteExpense = $expenseModel->deleteExpense($expenseId); // Call the deleteSale method

			if ($deleteExpense) {
				// Redirect to a success page or display a success message
				header('Location: ' . ROOT . '/Expenses');
			} else {
				$errorMessage = "Something wrong in the deletion process";
				// Pass the error message to the view
				return $this->view('sales', ['errorMessage' => $errorMessage]);
			}
		} else {
			// Invalid request
			echo "Invalid request.";
		}
	}

}
